void main() {
//! Obs: String
  /// Uma sequ√™ncia de unidades de c√≥digo UTF-16.
  /// Strings s√£o usadas principalmente para representar texto. Um personagem pode ser representado por
  /// v√°rios pontos de c√≥digo, cada ponto de c√≥digo consistindo em um ou dois c√≥digos
  /// unidades. Por exemplo, o caractere da bandeira de Papua Nova Guin√© requer quatro c√≥digos
  /// unidades para representar dois pontos de c√≥digo, mas devem ser tratados como um √∫nico
  /// caractere: "üáµüá¨". Plataformas que n√£o suportam o caractere sinalizador podem mostrar
  /// as letras "PG" em vez disso. Se os pontos de c√≥digo forem trocados, ele se torna
  /// a bandeira de Guadalupe "üá¨üáµ" ("GP").
  /// Uma string pode ser √∫nica ou multilinha. Strings de linha √∫nica s√£o
  /// escrito usando aspas simples ou duplas correspondentes, e strings de v√°rias linhas s√£o
  /// escrito usando aspas triplas. A seguir est√£o todas as sequ√™ncias de Dart v√°lidas:
  /// ```dart
  /// 'Single quotes';
  /// "Double quotes";
  /// 'Double quotes in "single" quotes';
  /// "Single quotes in 'double' quotes";
  ///
  /// '''A
  /// multiline
  /// string''';
  ///
  /// """
  /// Another
  /// multiline
  /// string""";
  /// ```
  /// Strings s√£o imut√°veis. Embora voc√™ n√£o possa alterar uma string, voc√™ pode executar
  /// uma opera√ß√£o em uma string que cria uma nova string:
  /// ```dart
  /// const string = 'Dart is fun';
  /// print(string.substring(0, 4)); // 'Dart'
  /// ```
  /// Voc√™ pode usar o operador mais (`+`) para concatenar strings:
  /// ```dart
  /// const string = 'Dart ' + 'is ' + 'fun!';
  /// print(string); // 'Dart is fun!'
  /// Literais de string adjacentes s√£o concatenados automaticamente:
  /// ```dart
  /// const string = 'Dart ' 'is ' 'fun!';
  /// print(string); // 'Dart is fun!'
  /// ```
  /// Voc√™ pode usar `${}` para interpolar o valor das express√µes Dart
  /// dentro de strings. As chaves podem ser omitidas ao avaliar identificadores:
  /// ```dart
  /// const string = 'dartlang';
  /// print('$string has ${string.length} letters'); // dartlang has 8 letters
  /// ```
  /// Uma string √© representada por uma sequ√™ncia de unidades de c√≥digo Unicode UTF-16
  /// acess√≠vel atrav√©s dos membros [codeUnitAt] ou [codeUnits]:
  /// ```dart
  /// const string = 'Dart';
  /// final firstCodeUnit = string.codeUnitAt(0);
  /// print(firstCodeUnit); // 68, aka U+0044, the code point for 'D'.
  /// final allCodeUnits = string.codeUnits;
  /// print(allCodeUnits); // [68, 97, 114, 116]
  /// ```
  /// Uma representa√ß√£o de string das unidades de c√≥digo individuais √© acess√≠vel atrav√©s
  /// o operador de √≠ndice:
  /// ```dart
  /// const string = 'Dart';
  /// final charAtIndex = string[0];
  /// print(charAtIndex); // 'D'
  /// ```
  /// Os caracteres de uma string s√£o codificados em UTF-16. Decodifica√ß√£o UTF-16, que
  /// combina pares substitutos, gera pontos de c√≥digo Unicode. Seguindo um semelhante
  /// terminologia para Go, Dart usa o nome 'rune' para um inteiro representando um
  /// ponto de c√≥digo Unicode. Use a propriedade [runes] para obter as runas de uma string:
  /// ```dart
  /// const string = 'Dart';
  /// final runes = string.runes.toList();
  /// print(runes); // [68, 97, 114, 116]
  /// ```
  /// Para um caractere fora do Plano Multil√≠ngue B√°sico (plano 0) que √©
  /// composto por um par substituto, [runes] combina o par e retorna um
  /// √∫nico inteiro. Por exemplo, o caractere Unicode para um
  /// musical G-clef ('ùÑû') com valor de runa 0x1D11E consiste em um substituto UTF-16
  /// par: `0xD834` e `0xDD1E`. Usando [codeUnits] retorna o par substituto,
  /// e usando `runes` retorna seu valor combinado:
  /// ```dart
  /// const clef = '\u{1D11E}';
  /// for (final item in clef.codeUnits) {
  ///   print(item.toRadixString(16));
  ///   // d834
  ///   // dd1e
  /// }
  /// for (final item in clef.runes) {
  ///   print(item.toRadixString(16)); // 1d11e
  /// }
  /// ```
  /// A classe `String` n√£o pode ser estendida ou implementada. Tentando fazer isso
  /// produz um erro em tempo de compila√ß√£o.

  /// ## Outros recursos
  /// * [StringBuffer] para construir de forma eficiente uma string de forma incremental.
  /// * [RegExp] para trabalhar com express√µes regulares.
  /// * [Strings e express√µes regulares](https://dart.dev/guides/libraries/library-tour#strings-and-regular-expressions)

//! String.fromCharCodes (Plural)
  /// Aloca uma nova string contendo o [charCodes] especificado.
  /// Os [charCodes] podem ser unidades de c√≥digo UTF-16 e runas.
  /// Se um valor char-code for de 16 bits, ele √© usado como uma unidade de c√≥digo:
  /// ```dart
  /// final string = String.fromCharCodes([68]);
  /// print(string); // D
  /// ```
  /// Se um valor de char-code for maior que 16 bits, ele √© decomposto em um
  /// par substituto:
  /// ```dart
  /// final clef = String.fromCharCodes([0x1D11E]);
  /// clef.codeUnitAt(0); // 0xD834
  /// clef.codeUnitAt(1); // 0xDD1E
  /// ```
  /// Se [start] e [end] forem fornecidos, apenas os valores de [charCodes]
  /// nas posi√ß√µes de `start` at√©, mas n√£o incluindo, `end`, s√£o usados.
  /// Os valores `start` e `end` devem satisfazer `0 <= in√≠cio <= fim <= charCodes.length`.

//! String.fromCharCode (Singular)
  /// Aloca uma nova string contendo o [charCode] especificado.
  /// Se o [charCode] puder ser representado por uma √∫nica unidade de c√≥digo UTF-16, o novo
  /// string cont√©m uma √∫nica unidade de c√≥digo. Caso contr√°rio, o [comprimento] √© 2 e
  /// as unidades de c√≥digo formam um par substituto. Consulte a documenta√ß√£o para [fromCharCodes].
  /// √â permitido criar uma [String] com metade de um par substituto.

//! String.fromEnvironment
  /// O valor da string da declara√ß√£o do ambiente [name].
  /// Declara√ß√µes de ambiente s√£o fornecidas pela compila√ß√£o do sistema circundante
  /// ou executando o programa Dart. Declara√ß√µes mapeiam uma chave de string para uma string valor.
  /// Se [name] n√£o for declarado no ambiente, o resultado ser√°[valor padr√£o].
  /// Exemplo de obten√ß√£o de um valor:
  /// ```dart
  /// const String.fromEnvironment("defaultFloo", defaultValue: "no floo")
  /// ```
  /// Para verificar se existe uma declara√ß√£o, use
  /// [bool.hasEnvironment]. Exemplo:
  /// ```dart
  /// const maybeDeclared = bool.hasEnvironment("maybeDeclared")
  ///     ? String.fromEnvironment("maybeDeclared")
  ///     : null;
  /// ```
  /// O valor da string, ou a falta de um valor, associado a um [nome]
  /// deve ser consistente em todas as chamadas para `String.fromEnvironment`,
  /// [int.fromEnvironment], [bool.fromEnvironment] e [bool.hasEnvironment] em um √∫nico programa.
  /// Este construtor s√≥ funciona quando invocado como `const`.
  /// Pode funcionar como uma invoca√ß√£o n√£o constante em algumas plataformas que
  /// tem acesso √†s op√ß√µes do compilador em tempo de execu√ß√£o, mas mais adiantado
  /// plataformas compiladas n√£o ter√£o esta informa√ß√£o.
  // Os construtores .fromEnvironment() s√£o especiais porque n√£o queremos
  // usu√°rios para cham√°-los usando "new". Proibimos isso dando-lhes corpos
  // que lan√ßa, mesmo que os construtores const n√£o tenham permiss√£o para ter corpos.
  // Desabilita esses erros est√°ticos.

//! String operator []
  /// O caractere (como uma unidade de c√≥digo √∫nico [String]) no [index].
  /// A string retornada representa exatamente uma unidade de c√≥digo UTF-16, que pode ser
  /// metade de um par substituto. Um √∫nico membro de um par substituto √© um string UTF-16 inv√°lida:
  /// ```dart
  /// var clef = '\u{1D11E}';
  // These represent invalid UTF-16 strings.
  /// clef[0].codeUnits;      // [0xD834]
  /// clef[1].codeUnits;      // [0xDD1E]
  /// ```
  /// Este m√©todo √© equivalente a
  /// `String.fromCharCode(this.codeUnitAt(index))`.

//! codeUnitAt
  /// Retorna a unidade de c√≥digo UTF-16 de 16 bits no [index].

//! length
  /// O comprimento da string.
  /// Retorna o n√∫mero de unidades de c√≥digo UTF-16 nesta string. O n√∫mero
  /// de [runes] pode ser menor, se a string contiver caracteres fora
  /// o Plano Multil√≠ngue B√°sico (plano 0):
  /// ```dart
  /// 'Dart'.length;          // 4
  /// 'Dart'.runes.length;    // 4
  ///
  /// var clef = '\u{1D11E}';
  /// clef.length;            // 2
  /// clef.runes.length;      // 1
  /// ```

//! hashCode
  /// Um ‚Äã‚Äãc√≥digo hash derivado das unidades de c√≥digo da string.
  /// Isso √© compat√≠vel com [operador ==]. Strings com a mesma sequ√™ncia
  /// de unidades de c√≥digo t√™m o mesmo c√≥digo hash.

//! bool operator ==
  /// Se [other] √© uma `String` com a mesma sequ√™ncia de unidades de c√≥digo.
  /// Este m√©todo compara cada unidade de c√≥digo individual das strings.
  /// N√£o verifica a equival√™ncia de Unicode.
  /// Por exemplo, ambas as strings a seguir representam a string 'Am√©lie',
  /// mas devido √† sua codifica√ß√£o diferente, n√£o s√£o iguais:
  /// ```dart
  /// 'Am\xe9lie' == 'Ame\u{301}lie'; // false
  /// ```
  /// A primeira string codifica '√©' como uma √∫nica unidade de c√≥digo unicode (tamb√©m
  /// uma √∫nica runa), enquanto a segunda string a codifica como 'e' com o
  /// combinando o caractere de acento '‚óåÃÅ'.

//! compareTo
  /// Compara esta string com [other].
  /// Retorna um valor negativo se `this` for ordenado antes de `other`,
  /// um valor positivo se `this` for ordenado ap√≥s `other`,
  /// ou zero se `this` e `other` s√£o equivalentes.
  /// A ordena√ß√£o √© a mesma que a ordena√ß√£o das unidades de c√≥digo no primeiro
  /// posi√ß√£o onde as duas strings diferem.
  /// Se uma string √© um prefixo da outra,
  /// ent√£o a string mais curta √© ordenada antes da string mais longa.
  /// Se as strings tiverem exatamente o mesmo conte√∫do, elas s√£o equivalentes com
  /// em rela√ß√£o √† ordena√ß√£o.
  /// A ordena√ß√£o n√£o verifica a equival√™ncia de Unicode.
  /// A compara√ß√£o diferencia mai√∫sculas de min√∫sculas.
  /// ```dart
  /// var relation = 'Dart'.compareTo('Go');
  /// print(relation); // < 0
  /// relation = 'Go'.compareTo('Forward');
  /// print(relation); // > 0
  /// relation = 'Forward'.compareTo('Forward');
  /// print(relation); // 0
  /// ```

//! endsWith
  /// Se esta string termina com [other].
  /// ```dart
  /// const string = 'Dart is open source';
  /// print(string.endsWith('urce')); // true
  /// ```

//! startsWith
  /// Se esta string come√ßa com uma correspond√™ncia de [pattern].
  /// ```dart
  /// const string = 'Dart is open source';
  /// print(string.startsWith('Dar')); // true
  /// print(string.startsWith(RegExp(r'[A-Z][a-z]'))); // true
  /// ```
  /// Se [index] for fornecido, este m√©todo verifica se a substring inicial
  /// nesse √≠ndice come√ßa com uma correspond√™ncia de [pattern]:
  /// ```dart
  /// const string = 'Dart';
  /// print(string.startsWith('art', 0)); // false
  /// print(string.startsWith('art', 1)); // true
  /// print(string.startsWith(RegExp(r'\w{3}'), 2)); // false
  /// ```
  /// [index] n√£o deve ser negativo ou maior que [length].
  ///
  /// Um ‚Äã‚Äã[RegExp] contendo '^' n√£o corresponde se o [index] for maior que
  /// zero e o regexp n√£o √© multi-linha.
  /// O padr√£o funciona na string como um todo e n√£o extrai
  /// uma substring come√ßando em [index] primeiro:
  /// ```dart
  /// const string = 'Dart';
  /// print(string.startsWith(RegExp(r'^art'), 1)); // false
  /// print(string.startsWith(RegExp(r'art'), 1)); // true
  /// ```

//! indexOf
  /// Retorna a posi√ß√£o da primeira correspond√™ncia de [pattern] nesta string,
  /// come√ßando em [start], inclusive:
  /// ```dart
  /// const string = 'Dartisans';
  /// print(string.indexOf('art')); // 1
  /// print(string.indexOf(RegExp(r'[A-Z][a-z]'))); // 0
  /// ```
  /// Retorna -1 se nenhuma correspond√™ncia for encontrada:
  /// ```dart
  /// const string = 'Dartisans';
  /// string.indexOf(RegExp(r'dart')); // -1
  /// ```
  /// O [start] deve ser n√£o negativo e n√£o maior que [length].

//! lastIndexOf
  /// A posi√ß√£o inicial da √∫ltima correspond√™ncia [padr√£o] nesta string.
  /// Encontra uma correspond√™ncia de padr√£o pesquisando para tr√°s come√ßando em [start]:
  /// ```dart
  /// const string = 'Dartisans';
  /// print(string.lastIndexOf('a')); // 6
  /// print(string.lastIndexOf(RegExp(r'a(r|n)'))); // 6
  /// ```
  /// Retorna -1 se [padr√£o] n√£o puder ser encontrado nesta string.
  /// ```dart
  /// const string = 'Dartisans';
  /// print(string.lastIndexOf(RegExp(r'DART'))); // -1
  /// ```
  /// Se [start] for omitido, a pesquisa come√ßa a partir do final da string.
  /// Se fornecido, [start] deve ser n√£o negativo e n√£o maior que [length].

//! isEmpty
  /// Se esta string est√° vazia.

//! isNotEmpty
  /// Se esta string n√£o est√° vazia.

//! String operator +
  /// Cria uma nova string concatenando esta string com [other].
  /// Example:
  /// ```dart
  /// const string = 'dart' + 'lang'; // 'dartlang'
  /// ```

//! substring
  /// A substring desta string de [start], inclusive, at√© [end], exclusive.
  /// Example:
  /// ```dart
  /// const string = 'dartlang';
  /// var result = string.substring(1); // 'artlang'
  /// result = string.substring(1, 4); // 'art'
  /// ```
  /// Ambos [start] e [end] devem ser n√£o negativos e n√£o maiores que [length], e
  /// [end], se fornecido, deve ser maior ou igual a [start].

//! trim
  /// A string sem nenhum espa√ßo em branco inicial e final.
  ///
  /// Se a string contiver espa√ßos em branco √† esquerda ou √† direita, uma nova string sem
  /// √† esquerda e nenhum espa√ßo em branco √† direita √© retornado:
  /// ```dart
  /// final trimmed = '\tDart is fun\n'.trim();
  /// print(trimmed); // 'Dart is fun'
  /// ```
  /// Caso contr√°rio, a pr√≥pria string original √© retornada:
  /// ```dart
  /// const string1 = 'Dart';
  /// final string2 = string1.trim(); // 'Dart'
  /// print(identical(string1, string2)); // true
  /// ```
  /// Whitespace √© definido pela propriedade Unicode White_Space (conforme definido em
  /// vers√£o 6.2 ou posterior) e o caractere BOM, 0xFEFF.
  /// Aqui est√° a lista de caracteres aparados de acordo com o Unicode vers√£o 6.3:
  /// ```plaintext
  ///     0009..000D    ; White_Space # Cc   <control-0009>..<control-000D>
  ///     0020          ; White_Space # Zs   SPACE
  ///     0085          ; White_Space # Cc   <control-0085>
  ///     00A0          ; White_Space # Zs   NO-BREAK SPACE
  ///     1680          ; White_Space # Zs   OGHAM SPACE MARK
  ///     2000..200A    ; White_Space # Zs   EN QUAD..HAIR SPACE
  ///     2028          ; White_Space # Zl   LINE SEPARATOR
  ///     2029          ; White_Space # Zp   PARAGRAPH SEPARATOR
  ///     202F          ; White_Space # Zs   NARROW NO-BREAK SPACE
  ///     205F          ; White_Space # Zs   MEDIUM MATHEMATICAL SPACE
  ///     3000          ; White_Space # Zs   IDEOGRAPHIC SPACE
  ///
  ///     FEFF          ; BOM                ZERO WIDTH NO_BREAK SPACE
  /// ```
  /// Algumas vers√µes posteriores do Unicode n√£o incluem U+0085 como um espa√ßo em branco
  /// personagem. Se √© aparado depende da vers√£o Unicode
  /// usado pelo sistema.

//! trimLeft
  /// A string sem nenhum espa√ßo em branco inicial.
  /// Como [trim], mas apenas remove os espa√ßos em branco iniciais.
  /// ```dart
  /// final string = ' Dart '.trimLeft();
  /// print(string); // 'Dart '
  /// ```

//! trimRight
  /// A string sem nenhum espa√ßo em branco √† direita.
  /// Como [trim], mas apenas remove os espa√ßos em branco √† direita.
  /// ```dart
  /// final string = ' Dart '.trimRight();
  /// print(string); // ' Dart'
  /// ```

//! String operator *
  /// Cria uma nova string concatenando esta string consigo mesma um n√∫mero das vezes.
  /// O resultado de `str * n` √© equivalente a
  /// `str + str + ...`(n vezes)`... + str`.
  /// ```dart
  /// const string = 'Dart';
  /// final multiplied = string * 3;
  /// print(multiplied); // 'DartDartDart'
  /// ```
  /// Retorna uma string vazia se [times] for zero ou negativo.

//! padLeft
  /// Preenche esta string √† esquerda se for menor que [width].
  /// Retorna uma nova string que precede [padding] nesta string
  /// uma vez para cada posi√ß√£o o comprimento √© menor que [width].
  /// ```dart
  /// const string = 'D';
  /// print(string.padLeft(4)); // '   D'
  /// print(string.padLeft(2, 'x')); // 'xD'
  /// print(string.padLeft(4, 'y')); // 'yyyD'
  /// print(string.padLeft(4, '>>')); // '>>>>>>D'
  /// ```
  /// Se [width] j√° for menor ou igual a `this.length`,
  /// nenhum preenchimento √© adicionado. Uma "largura" negativa √© tratada como zero.
  ///
  /// Se [padding] tiver comprimento diferente de 1, o resultado n√£o ser√°
  /// tem comprimento `width`. Isso pode ser √∫til para os casos em que o
  /// padding √© uma string mais longa que representa um √∫nico caractere, como
  /// `"&nbsp;"` ou `"\u{10002}`".
  /// Nesse caso, o usu√°rio deve certificar-se de que `this.length` seja
  /// a medida correta do comprimento da string.

//! padRight
  /// Preenche esta string √† direita se for menor que [width].
  /// Retorna uma nova string que acrescenta [padding] ap√≥s esta string
  /// uma vez para cada posi√ß√£o o comprimento √© menor que [width].
  /// ```dart
  /// const string = 'D';
  /// print(string.padRight(4)); // 'D    '
  /// print(string.padRight(2, 'x')); // 'Dx'
  /// print(string.padRight(4, 'y')); // 'Dyyy'
  /// print(string.padRight(4, '>>')); // 'D>>>>>>'
  /// ```
  /// Se [width] j√° for menor ou igual a `this.length`,
  /// nenhum preenchimento √© adicionado. Uma "largura" negativa √© tratada como zero.
  ///
  /// Se [padding] tiver comprimento diferente de 1, o resultado n√£o ser√°
  /// tem comprimento `width`. Isso pode ser √∫til para os casos em que o
  /// padding √© uma string mais longa que representa um √∫nico caractere, como
  /// `"&nbsp;"` ou `"\u{10002}`".
  /// Nesse caso, o usu√°rio deve certificar-se de que `this.length` seja
  /// a medida correta do comprimento da string.

//! contains
  /// Se esta string cont√©m uma correspond√™ncia de [other].
  /// Example:
  /// ```dart
  /// const string = 'Dart strings';
  /// final containsD = string.contains('D'); // true
  /// final containsUpperCase = string.contains(RegExp(r'[A-Z]')); // true
  /// ```
  /// Se [startIndex] for fornecido, este m√©todo corresponde apenas a ou depois disso
  /// √≠ndice:
  /// ```dart
  /// const string = 'Dart strings';
  /// final containsD = string.contains(RegExp('D'), 0); // true
  /// final caseSensitive = string.contains(RegExp(r'[A-Z]'), 1); // false
  /// ```
  /// O [startIndex] n√£o deve ser negativo ou maior que [length].

//! replaceFirst
  /// Cria uma nova string com a primeira ocorr√™ncia de [from] substitu√≠da por [to].
  /// Encontra a primeira correspond√™ncia de [from] nesta string, come√ßando em [startIndex],
  /// e cria uma nova string onde essa correspond√™ncia √© substitu√≠da pela string [to].
  /// Example:
  /// ```dart
  /// '0.0001'.replaceFirst(RegExp(r'0'), ''); // '.0001'
  /// '0.0001'.replaceFirst(RegExp(r'0'), '7', 1);  // '0.7001'
  /// ```

//! replaceFirstMapped
  /// Substitui a primeira ocorr√™ncia de [from] nesta string.
  /// ```dart
  /// const string = 'Dart is fun';
  /// print(string.replaceFirstMapped(
  ///     'fun', (m) => 'open source')); // Dart is open source
  ///
  /// print(string.replaceFirstMapped(
  ///     RegExp(r'\w(\w*)'), (m) => '<${m[0]}-${m[1]}>')); // <Dart-art> is fun
  /// ```
  /// Retorna uma nova string, que √© esta string
  /// exceto que a primeira correspond√™ncia de [from], come√ßando em [startIndex],
  /// √© substitu√≠do pelo resultado da chamada [replace] com o objeto match.
  ///
  /// O [startIndex] deve ser n√£o negativo e n√£o maior que [length].

//! replaceAll
  /// Substitui todas as substrings que correspondem a [from] por [replace].
  ///
  /// Cria uma nova string na qual as substrings n√£o sobrepostas correspondem
  /// [from] (os iterados por `from.allMatches(thisString)`) s√£o substitu√≠dos
  /// pela string literal [substituir].
  /// ```dart
  /// 'resume'.replaceAll(RegExp(r'e'), '√©'); // 'r√©sum√©'
  /// ```
  /// Observe que a string [replace] n√£o √© interpretada. Se a substitui√ß√£o
  /// depende da correspond√™ncia (por exemplo, nos grupos de captura de um [RegExp]), use
  /// o m√©todo [replaceAllMapped] em vez disso.

//! replaceAllMapped
  /// Substitui todas as substrings que correspondem a [from] por uma string computada.
  /// Cria uma nova string na qual as substrings n√£o sobrepostas que correspondem
  /// [from] (os iterados por `from.allMatches(thisString)`) s√£o substitu√≠dos
  /// pelo resultado de chamar [replace] no objeto [Match] correspondente.
  /// Isso pode ser usado para substituir correspond√™ncias por novo conte√∫do que depende do
  /// corresponde, ao contr√°rio de [replaceAll] onde a string de substitui√ß√£o √© sempre a mesma.
  /// A fun√ß√£o [replace] √© chamada com o [Match] gerado
  /// pelo padr√£o, e seu resultado √© usado como substituto.
  /// A fun√ß√£o definida abaixo converte cada palavra em uma string para simplificado
  /// 'porco latino' usando [replaceAllMapped]:
  /// ```dart
  /// String pigLatin(String words) => words.replaceAllMapped(
  ///     RegExp(r'\b(\w*?)([aeiou]\w*)', caseSensitive: false),
  ///     (Match m) => "${m[2]}${m[1]}${m[1]!.isEmpty ? 'way' : 'ay'}");
  ///
  /// final result = pigLatin('I have a secret now!');
  /// print(result); // 'Iway avehay away ecretsay ownay!'
  /// ```

//! replaceRange
  /// Substitui a substring de [start] a [end] por [replacement].
  ///
  /// Cria uma nova string equivalente a:
  /// ```dart
  /// this.substring(0, start) + replacement + this.substring(end)
  /// ```
  /// Example:
  /// ```dart
  /// const string = 'Dart is fun';
  /// final result = string.replaceRange(8, null, 'open source');
  /// print(result); // Dart is open source
  /// ```
  /// Os √≠ndices [start] e [end] devem especificar um intervalo v√°lido desta string.
  /// Isso √© `0 <= start <= end <= this.length`.
  /// Se [end] for `null`, o padr√£o √© [length].

//! split
  /// Divide a string em correspond√™ncias de [pattern] e retorna uma lista de substrings.
  ///
  /// Encontra todas as correspond√™ncias de `pattern` nesta string,
  /// como usando [Pattern.allMatches],
  /// e retorna a lista das substrings entre as correspond√™ncias,
  /// antes da primeira partida e depois da √∫ltima partida.
  /// ```dart
  /// const string = 'Hello world!';
  /// final splitted = string.split(' ');
  /// print(splitted); // [Hello, world!];
  /// ```
  /// Se o padr√£o n√£o corresponder a essa string,
  /// o resultado √© sempre uma lista contendo apenas a string original.
  ///
  /// Se o [padr√£o] for uma [String], ent√£o √© sempre o caso que:
  /// ```dart
  /// string.split(pattern).join(pattern) == string
  /// ```
  /// Se a primeira correspond√™ncia for uma correspond√™ncia vazia no in√≠cio da string,
  /// a substring vazia antes de n√£o ser inclu√≠da no resultado.
  /// Se a √∫ltima correspond√™ncia for uma correspond√™ncia vazia no final da string,
  /// a substring vazia ap√≥s n√£o ser inclu√≠da no resultado.
  /// Se uma correspond√™ncia estiver vazia e seguir imediatamente uma anterior
  /// partida (come√ßa na posi√ß√£o onde a partida anterior terminou),
  /// ent√£o a substring vazia entre as duas correspond√™ncias n√£o √©
  /// inclu√≠do no resultado.
  /// ```dart
  /// const string = 'abba';
  /// final re = RegExp(r'b*');
  /// // re.allMatches(string) will find four matches:
  /// // * empty match before first "a".
  /// // * match of "bb"
  /// // * empty match after "bb", before second "a"
  /// // * empty match after second "a".
  /// print(string.split(re)); // [a, a]
  /// ```
  /// Uma correspond√™ncia n√£o vazia no in√≠cio ou no final da string, ou ap√≥s outra
  /// corresponde, n√£o √© tratado especialmente e introduzir√° substrings vazias
  /// no resultado:
  /// ```dart
  /// const string = 'abbaa';
  /// final splitted = string.split('a'); // ['', 'bb', '', '']
  /// ```
  /// Se esta string for a string vazia, o resultado √© uma lista vazia
  /// se `pattern` corresponder √† string vazia, j√° que a string vazia
  /// antes e depois da primeira e √∫ltima correspond√™ncia vazia n√£o s√£o inclu√≠das.
  /// (Ainda √© uma lista contendo a string vazia original `[""]`
  /// se o padr√£o n√£o corresponder).
  /// ```dart
  /// const string = '';
  /// print(string.split('')); // []
  /// print(string.split('a')); // []
  /// ```
  /// Dividir com um padr√£o vazio divide a string em uma unidade de c√≥digo √∫nico
  /// Strings.
  /// ```dart
  /// const string = 'Pub';
  /// print(string.split('')); // [P, u, b]
  ///
  /// // Same as:
  /// var codeUnitStrings = [
  ///   for (final unit in string.codeUnits) String.fromCharCode(unit)
  /// ];
  /// print(codeUnitStrings); // [P, u, b]
  /// ```
  /// A divis√£o acontece nos limites da unidade de c√≥digo UTF-16,
  /// e n√£o nos limites da runa (ponto de c√≥digo Unicode):
  /// ```dart
  /// // String made up of two code units, but one rune.
  /// const string = '\u{1D11E}';
  /// final splitted = string.split('');
  /// print(splitted); // ['\ud834', '\udd1e'] - 2 unpaired surrogate values
  /// ```
  /// Para obter uma lista de strings contendo as runas individuais de uma string,
  /// voc√™ n√£o deve usar split.
  /// Voc√™ pode obter uma string para cada runa da seguinte forma:
  /// ```dart
  /// const string = '\u{1F642}';
  /// for (final rune in string.runes) {
  ///   print(String.fromCharCode(rune));
  /// }
  /// ```

//! splitMapJoin
  /// Divide a string, converte suas partes e as combina em um novo
  /// fragmento.
  ///
  /// O [padr√£o] √© usado para dividir a string
  /// em partes e separando correspond√™ncias.
  /// Cada correspond√™ncia de [Pattern.allMatches] de [pattern] nesta string √©
  /// usado como uma correspond√™ncia e as substrings entre o final de uma correspond√™ncia
  /// (ou o in√≠cio da string) e o in√≠cio da pr√≥xima partida (ou o
  /// fim da string) √© tratado como uma parte n√£o correspondida.
  /// (N√£o h√° omiss√£o de correspond√™ncias vazias √† esquerda ou √† direita, como
  /// em [split], todas as correspond√™ncias e partes entre as est√£o inclu√≠das.)
  ///
  /// Cada correspond√™ncia √© convertida em uma string chamando [onMatch]. Se [no jogo]
  /// √© omitido, a substring correspondente √© usada.
  ///
  /// Cada parte n√£o correspondida √© convertida em uma string por uma chamada para [onNonMatch].
  /// Se [onNonMatch] for omitido, a pr√≥pria substring n√£o correspondente ser√° usada.
  ///
  /// Ent√£o todas as partes convertidas s√£o concatenadas na string resultante.
  /// ```dart
  /// final result = 'Eats shoots leaves'.splitMapJoin(RegExp(r'shoots'),
  ///     onMatch: (m) => '${m[0]}', // (or no onMatch at all)
  ///     onNonMatch: (n) => '*');
  /// print(result); // *shoots*
  /// ```

//! codeUnits
  /// Uma lista n√£o modific√°vel das unidades de c√≥digo UTF-16 desta string.

//! runes
  /// Um ‚Äã‚Äã[Iterable] de pontos de c√≥digo Unicode desta string.
  /// Se a string cont√©m pares substitutos, eles s√£o combinados e retornados
  /// como um inteiro por este iterador. Metades substitutas incompar√°veis ‚Äã‚Äãs√£o tratadas
  /// como unidades de c√≥digo v√°lidas de 16 bits.

//! toLowerCase
  /// Converte todos os caracteres nesta string para letras min√∫sculas.
  /// Se a string j√° estiver em letras min√∫sculas, este m√©todo retorna `this`.
  /// ```dart
  /// 'ALPHABET'.toLowerCase(); // 'alphabet'
  /// 'abc'.toLowerCase(); // 'abc'
  /// ```
  /// Esta fun√ß√£o usa o mapeamento Unicode independente de idioma e, portanto, apenas
  /// funciona em alguns idiomas.
  // TODO(floitsch): documenta melhor. (Veja EcmaScript para descri√ß√£o).

//! toUpperCase
  /// Converte todos os caracteres desta string para mai√∫sculas.
  /// Se a string j√° estiver em letras mai√∫sculas, este m√©todo retorna `this`.
  /// ```dart
  /// 'alphabet'.toUpperCase(); // 'ALPHABET'
  /// 'ABC'.toUpperCase(); // 'ABC'
  /// ```
  /// Esta fun√ß√£o usa o mapeamento Unicode independente de idioma e, portanto, apenas
  /// funciona em alguns idiomas.
  // TODO(floitsch): documenta melhor. (Veja EcmaScript para descri√ß√£o).
}
